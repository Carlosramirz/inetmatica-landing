#!/usr/bin/env node

const nodemailer = require('nodemailer');
const path = require('path');
const fs = require('fs');

console.log('üîç DIAGN√ìSTICO DEL SISTEMA DE EMAIL - INETMATICA');
console.log('================================================\n');

// Verificar si existe el archivo .env
const envPath = path.join(__dirname, '.env');
if (!fs.existsSync(envPath)) {
    console.log('‚ùå ERROR: Archivo .env no encontrado');
    console.log('üìã SOLUCI√ìN: Copia el archivo env.example a .env');
    console.log('   cp env.example .env');
    process.exit(1);
}

// Cargar variables de entorno
require('dotenv').config();

console.log('‚úÖ Archivo .env encontrado');
console.log('üìß Verificando configuraci√≥n de email...\n');

// Verificar variables de entorno requeridas
const requiredVars = ['EMAIL_USER', 'EMAIL_PASS', 'ADMIN_EMAIL'];
const missingVars = [];

requiredVars.forEach(varName => {
    if (!process.env[varName]) {
        missingVars.push(varName);
    }
});

if (missingVars.length > 0) {
    console.log('‚ùå ERROR: Variables de entorno faltantes:');
    missingVars.forEach(varName => {
        console.log(`   - ${varName}`);
    });
    console.log('\nüìã SOLUCI√ìN: Configura estas variables en tu archivo .env');
    process.exit(1);
}

console.log('‚úÖ Variables de entorno configuradas');
console.log(`üìß EMAIL_USER: ${process.env.EMAIL_USER}`);
console.log(`üìß ADMIN_EMAIL: ${process.env.ADMIN_EMAIL}`);
console.log(`üîë EMAIL_PASS: ${process.env.EMAIL_PASS ? '***configurada***' : 'NO CONFIGURADA'}\n`);

// Crear transporter
const transporter = nodemailer.createTransporter({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
    },
    tls: {
        rejectUnauthorized: false
    }
});

console.log('üîß Configuraci√≥n del transporter creada');
console.log('üß™ Probando conexi√≥n con Gmail...\n');

// Funci√≥n para probar la conexi√≥n
async function testEmailConnection() {
    try {
        console.log('‚è≥ Verificando autenticaci√≥n con Gmail...');
        await transporter.verify();
        console.log('‚úÖ Conexi√≥n exitosa con Gmail');
        return true;
    } catch (error) {
        console.log('‚ùå ERROR de conexi√≥n con Gmail:');
        console.log(`   ${error.message}`);
        
        if (error.code === 'EAUTH') {
            console.log('\nüîß POSIBLES SOLUCIONES:');
            console.log('   1. Verifica que la contrase√±a de aplicaci√≥n sea correcta');
            console.log('   2. Aseg√∫rate de que la autenticaci√≥n de 2 factores est√© activada');
            console.log('   3. Genera una nueva contrase√±a de aplicaci√≥n en Gmail');
            console.log('   4. URL: https://myaccount.google.com/apppasswords');
        } else if (error.code === 'ENOTFOUND') {
            console.log('\nüîß POSIBLES SOLUCIONES:');
            console.log('   1. Verifica tu conexi√≥n a internet');
            console.log('   2. Revisa la configuraci√≥n de firewall del servidor');
        }
        
        return false;
    }
}

// Funci√≥n para enviar email de prueba
async function sendTestEmail() {
    try {
        console.log('\nüìß Enviando email de prueba...');
        
        const testMailOptions = {
            from: process.env.EMAIL_USER,
            to: process.env.ADMIN_EMAIL,
            subject: 'üß™ Test Email - Sistema Inetmatica',
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                    <h1 style="color: #1e40af;">‚úÖ Email de Prueba Exitoso</h1>
                    <p>Este es un email de prueba del sistema de contacto de Inetmatica.</p>
                    <p><strong>Fecha:</strong> ${new Date().toLocaleString('es-ES')}</p>
                    <p><strong>Servidor:</strong> ${process.env.NODE_ENV || 'development'}</p>
                    <p>Si recibiste este email, el sistema est√° funcionando correctamente.</p>
                </div>
            `
        };

        await transporter.sendMail(testMailOptions);
        console.log('‚úÖ Email de prueba enviado exitosamente');
        console.log(`üìß Revisa la bandeja de entrada de: ${process.env.ADMIN_EMAIL}`);
        return true;
    } catch (error) {
        console.log('‚ùå ERROR enviando email de prueba:');
        console.log(`   ${error.message}`);
        return false;
    }
}

// Funci√≥n principal
async function runDiagnosis() {
    try {
        const connectionOk = await testEmailConnection();
        
        if (connectionOk) {
            console.log('\nüéØ Conexi√≥n exitosa. Probando env√≠o de email...');
            const emailOk = await sendTestEmail();
            
            if (emailOk) {
                console.log('\nüéâ DIAGN√ìSTICO COMPLETADO: Sistema de email funcionando correctamente');
                console.log('üí° Si el formulario sigue fallando, revisa:');
                console.log('   1. Los logs del servidor (pm2 logs)');
                console.log('   2. La configuraci√≥n del firewall');
                console.log('   3. Las validaciones del formulario en el frontend');
            } else {
                console.log('\n‚ùå DIAGN√ìSTICO: Problemas con el env√≠o de emails');
            }
        } else {
            console.log('\n‚ùå DIAGN√ìSTICO: Problemas de conexi√≥n con Gmail');
        }
        
    } catch (error) {
        console.log('\nüí• ERROR INESPERADO:');
        console.log(error);
    }
}

// Ejecutar diagn√≥stico
runDiagnosis().then(() => {
    console.log('\nüèÅ Diagn√≥stico finalizado');
    process.exit(0);
}).catch(error => {
    console.log('\nüí• ERROR FATAL:', error);
    process.exit(1);
}); 